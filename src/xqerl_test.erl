-module(xqerl_test).
-export([run/1]).
-export([run/2]).
-export([run_suite/1]).
-export([handle_environment/1]).
-include("xqerl.hrl").

run_suite(Suite) ->
   ct:run_test([{},{suite, Suite},{dir, "/git/zadean/xqerl/test"},{logdir, "/git/zadean/xqerl/test/logs"}])
.

run(misc) ->
   run_suite(app_CatalogCheck_SUITE),
   run_suite(app_Demos_SUITE),
   run_suite(app_FunctxFn_SUITE),
   run_suite(app_FunctxFunctx_SUITE),
   run_suite(app_UseCaseNS_SUITE),
   run_suite(app_UseCasePARTS_SUITE),
   run_suite(app_UseCaseR_SUITE),
   run_suite(app_UseCaseSEQ_SUITE),
   run_suite(app_UseCaseSGML_SUITE),
   run_suite(app_UseCaseSTRING_SUITE),
   run_suite(app_UseCaseTREE_SUITE),
   run_suite(app_UseCaseXMP_SUITE),
   run_suite(app_XMark_SUITE),
   run_suite(math_acos_SUITE),
   run_suite(math_asin_SUITE),
   run_suite(math_atan_SUITE),
   run_suite(math_atan2_SUITE),
   run_suite(math_cos_SUITE),
   run_suite(math_exp_SUITE),
   run_suite(math_exp10_SUITE),
   run_suite(math_log_SUITE),
   run_suite(math_log10_SUITE),
   run_suite(math_pi_SUITE),
   run_suite(math_pow_SUITE),
   run_suite(math_sin_SUITE),
   run_suite(math_sqrt_SUITE),
   run_suite(math_tan_SUITE),
   run_suite(map_new_SUITE),
   run_suite(map_contains_SUITE),
   run_suite(map_get_SUITE),
   run_suite(map_entry_SUITE),
   run_suite(map_size_SUITE),
   run_suite(map_keys_SUITE),
   run_suite(map_remove_SUITE),
   run_suite(map_collation_SUITE),
   run_suite(misc_CombinedErrorCodes_SUITE),
   run_suite(misc_AnnexE_SUITE),
   run_suite(misc_AppendixA4_SUITE),
   run_suite(misc_ErrorsAndOptimization_SUITE),
   run_suite(misc_HigherOrderFunctions_SUITE),
   run_suite(misc_MiscFunctions_SUITE),
   run_suite(misc_StaticContext_SUITE),
   run_suite(misc_Serialization_SUITE),
   run_suite(misc_Surrogates_SUITE),
   run_suite(misc_XMLEdition_SUITE),
   run_suite(xs_anyURI_SUITE),
   run_suite(xs_base64Binary_SUITE),
   run_suite(xs_dateTimeStamp_SUITE),
   run_suite(xs_double_SUITE),
   run_suite(xs_error_SUITE),
   run_suite(xs_float_SUITE),
   run_suite(xs_hexBinary_SUITE),
   run_suite(xs_normalizedString_SUITE),
   run_suite(xs_token_SUITE);
run(prod1) ->
   run_suite(prod_AllowingEmpty_SUITE),
   run_suite(prod_Annotation_SUITE),
   run_suite(prod_AxisStep_SUITE),
   run_suite(prod_AxisStep_abbr_SUITE),
   run_suite(prod_AxisStep_ancestor_SUITE),
   run_suite(prod_AxisStep_ancestor_or_self_SUITE),
   run_suite(prod_AxisStep_following_SUITE),
   run_suite(prod_AxisStep_following_sibling_SUITE),
   run_suite(prod_AxisStep_preceding_SUITE),
   run_suite(prod_AxisStep_preceding_sibling_SUITE),
   run_suite(prod_AxisStep_static_typing_SUITE),
   run_suite(prod_AxisStep_unabbr_SUITE),
   run_suite(prod_BaseURIDecl_SUITE),
   run_suite(prod_BoundarySpaceDecl_SUITE),
   run_suite(prod_CastableExpr_SUITE),
   run_suite(prod_CastExpr_SUITE),
   run_suite(prod_CastExpr_derived_SUITE),
   run_suite(prod_CastExpr_schema_SUITE),
   run_suite(prod_Comment_SUITE),
   run_suite(prod_CompAttrConstructor_SUITE),
   run_suite(prod_CompDocConstructor_SUITE),
   run_suite(prod_CompCommentConstructor_SUITE),
   run_suite(prod_CompElemConstructor_SUITE),
   run_suite(prod_CompNamespaceConstructor_SUITE),
   run_suite(prod_CompPIConstructor_SUITE),
   run_suite(prod_CompTextConstructor_SUITE),
   run_suite(prod_ConstructionDecl_SUITE),
   run_suite(prod_ConstructionDecl_schema_SUITE),
   run_suite(prod_ContextItemDecl_SUITE),
   run_suite(prod_ContextItemExpr_SUITE),
   run_suite(prod_CopyNamespacesDecl_SUITE),
   run_suite(prod_CountClause_SUITE),
   run_suite(prod_DecimalFormatDecl_SUITE),
   run_suite(prod_DefaultCollationDecl_SUITE),
   run_suite(prod_DefaultNamespaceDecl_SUITE),
   run_suite(prod_DirAttributeList_SUITE),
   run_suite(prod_DirectConstructor_SUITE),
   run_suite(prod_DirElemConstructor_SUITE),
   run_suite(prod_DirElemContent_SUITE),
   run_suite(prod_DirElemContent_namespace_SUITE),
   run_suite(prod_DirElemContent_whitespace_SUITE);
run(prod2) ->
   run_suite(prod_EmptyOrderDecl_SUITE),
   run_suite(prod_EQName_SUITE),
   run_suite(prod_ExtensionExpr_SUITE),
   run_suite(prod_FLWORExpr_SUITE),
   run_suite(prod_FLWORExpr_static_typing_SUITE),
   run_suite(prod_ForClause_SUITE),
   run_suite(prod_FunctionCall_SUITE),
   run_suite(prod_FunctionDecl_SUITE),
   run_suite(prod_GeneralComp_eq_SUITE),
   run_suite(prod_GeneralComp_ge_SUITE),
   run_suite(prod_GeneralComp_gt_SUITE),
   run_suite(prod_GeneralComp_le_SUITE),
   run_suite(prod_GeneralComp_lt_SUITE),
   run_suite(prod_GeneralComp_ne_SUITE),
   run_suite(prod_GroupByClause_SUITE),
   run_suite(prod_IfExpr_SUITE),
   run_suite(prod_InstanceofExpr_SUITE),
   run_suite(prod_LetClause_SUITE),
   run_suite(prod_Literal_SUITE),
   run_suite(prod_ModuleImport_SUITE),
   run_suite(prod_NamedFunctionRef_SUITE),
   run_suite(prod_NamespaceDecl_SUITE),
   run_suite(prod_NameTest_SUITE),
   run_suite(prod_NodeTest_SUITE),
   run_suite(prod_OptionDecl_SUITE),
   run_suite(prod_OptionDecl_serialization_SUITE),
   run_suite(prod_OrExpr_SUITE),
   run_suite(prod_OrderByClause_SUITE),
   run_suite(prod_OrderingModeDecl_SUITE),
   run_suite(prod_PathExpr_SUITE),
   run_suite(prod_ParenthesizedExpr_SUITE),
   run_suite(prod_PositionalVar_SUITE),
   run_suite(prod_Predicate_SUITE),
   run_suite(prod_QuantifiedExpr_SUITE);
run(prod3) ->
   run_suite(prod_ReturnClause_SUITE),
   run_suite(prod_SchemaImport_SUITE),
   run_suite(prod_SequenceType_SUITE),
   run_suite(prod_StepExpr_SUITE),
   run_suite(prod_SwitchExpr_SUITE),
   run_suite(prod_TreatExpr_SUITE),
   run_suite(prod_TryCatchExpr_SUITE),
   run_suite(prod_TypeswitchExpr_SUITE),
   run_suite(prod_UnorderedExpr_SUITE),
   run_suite(prod_ValidateExpr_SUITE),
   run_suite(prod_ValueComp_SUITE),
   run_suite(prod_VarDecl_SUITE),
   run_suite(prod_VarDecl_external_SUITE),
   run_suite(prod_VarDefaultValue_SUITE),
   run_suite(prod_VersionDecl_SUITE),
   run_suite(prod_WhereClause_SUITE),
   run_suite(prod_WindowClause_SUITE);
run(fn) ->
   run_suite(fn_abs_SUITE),
   run_suite(fn_adjust_date_to_timezone_SUITE),
   run_suite(fn_adjust_dateTime_to_timezone_SUITE),
   run_suite(fn_adjust_time_to_timezone_SUITE),
   run_suite(fn_analyze_string_SUITE),
   run_suite(fn_available_environment_variables_SUITE),
   run_suite(fn_avg_SUITE),
   run_suite(fn_base_uri_SUITE),
   run_suite(fn_boolean_SUITE),
   run_suite(fn_ceiling_SUITE),
   run_suite(fn_codepoint_equal_SUITE),
   run_suite(fn_codepoints_to_string_SUITE),
   run_suite(fn_collection_SUITE),
   run_suite(fn_compare_SUITE),
   run_suite(fn_concat_SUITE),
   run_suite(fn_contains_SUITE),
   run_suite(fn_count_SUITE),
   run_suite(fn_current_date_SUITE),
   run_suite(fn_current_dateTime_SUITE),
   run_suite(fn_current_time_SUITE),
   run_suite(fn_data_SUITE),
   run_suite(fn_dateTime_SUITE),
   run_suite(fn_day_from_date_SUITE),
   run_suite(fn_day_from_dateTime_SUITE),
   run_suite(fn_days_from_duration_SUITE),
   run_suite(fn_deep_equal_SUITE),
   run_suite(fn_default_collation_SUITE),
   run_suite(fn_distinct_values_SUITE),
   run_suite(fn_doc_SUITE),
   run_suite(fn_doc_available_SUITE),
   run_suite(fn_document_uri_SUITE),
   run_suite(fn_element_with_id_SUITE),
   run_suite(fn_empty_SUITE),
   run_suite(fn_encode_for_uri_SUITE),
   run_suite(fn_ends_with_SUITE),
   run_suite(fn_environment_variable_SUITE),
   run_suite(fn_error_SUITE),
   run_suite(fn_escape_html_uri_SUITE),
   run_suite(fn_exactly_one_SUITE),
   run_suite(fn_exists_SUITE),
   run_suite(fn_false_SUITE),
   run_suite(fn_filter_SUITE),
   run_suite(fn_floor_SUITE),
   run_suite(fn_fold_left_SUITE),
   run_suite(fn_fold_right_SUITE),
   run_suite(fn_format_date_SUITE),
   run_suite(fn_format_dateTime_SUITE),
   run_suite(fn_format_integer_SUITE),
   run_suite(fn_format_number_SUITE),
   run_suite(fn_format_time_SUITE),
   run_suite(fn_function_lookup_SUITE),
   run_suite(fn_function_arity_SUITE),
   run_suite(fn_function_name_SUITE),
   run_suite(fn_generate_id_SUITE),
   run_suite(fn_has_children_SUITE),
   run_suite(fn_head_SUITE),
   run_suite(fn_hours_from_dateTime_SUITE),
   run_suite(fn_hours_from_duration_SUITE),
   run_suite(fn_hours_from_time_SUITE),
   run_suite(fn_id_SUITE),
   run_suite(fn_idref_SUITE),
   run_suite(fn_implicit_timezone_SUITE),
   run_suite(fn_innermost_SUITE),
   run_suite(fn_index_of_SUITE),
   run_suite(fn_insert_before_SUITE),
   run_suite(fn_in_scope_prefixes_SUITE),
   run_suite(fn_iri_to_uri_SUITE),
   run_suite(fn_lang_SUITE),
   run_suite(fn_last_SUITE),
   run_suite(fn_local_name_SUITE),
   run_suite(fn_local_name_from_QName_SUITE),
   run_suite(fn_lower_case_SUITE),
   run_suite(fn_for_each_SUITE),
   run_suite(fn_max_SUITE),
   run_suite(fn_for_each_pair_SUITE),
   run_suite(fn_matches_SUITE),
   run_suite(fn_matches_re_SUITE),
   run_suite(fn_min_SUITE),
   run_suite(fn_minutes_from_dateTime_SUITE),
   run_suite(fn_minutes_from_duration_SUITE),
   run_suite(fn_minutes_from_time_SUITE),
   run_suite(fn_month_from_date_SUITE),
   run_suite(fn_months_from_duration_SUITE),
   run_suite(fn_month_from_dateTime_SUITE),
   run_suite(fn_name_SUITE),
   run_suite(fn_namespace_uri_SUITE),
   run_suite(fn_namespace_uri_for_prefix_SUITE),
   run_suite(fn_namespace_uri_from_QName_SUITE),
   run_suite(fn_nilled_SUITE),
   run_suite(fn_node_name_SUITE),
   run_suite(fn_normalize_space_SUITE),
   run_suite(fn_normalize_unicode_SUITE),
   run_suite(fn_not_SUITE),
   run_suite(fn_number_SUITE),
   run_suite(fn_one_or_more_SUITE),
   run_suite(fn_outermost_SUITE),
   run_suite(fn_parse_json_SUITE),
   run_suite(fn_parse_xml_SUITE),
   run_suite(fn_parse_xml_fragment_SUITE),
   run_suite(fn_path_SUITE),
   run_suite(fn_position_SUITE),
   run_suite(fn_prefix_from_QName_SUITE),
   run_suite(fn_QName_SUITE),
   run_suite(fn_remove_SUITE),
   run_suite(fn_replace_SUITE),
   run_suite(fn_resolve_QName_SUITE),
   run_suite(fn_resolve_uri_SUITE),
   run_suite(fn_reverse_SUITE),
   run_suite(fn_root_SUITE),
   run_suite(fn_round_SUITE),
   run_suite(fn_round_half_to_even_SUITE),
   run_suite(fn_seconds_from_dateTime_SUITE),
   run_suite(fn_seconds_from_duration_SUITE),
   run_suite(fn_seconds_from_time_SUITE),
   run_suite(fn_serialize_SUITE),
   run_suite(fn_serialize_json_SUITE),
   run_suite(fn_starts_with_SUITE),
   run_suite(fn_static_base_uri_SUITE),
   run_suite(fn_string_SUITE),
   run_suite(fn_string_join_SUITE),
   run_suite(fn_string_length_SUITE),
   run_suite(fn_string_to_codepoints_SUITE),
   run_suite(fn_subsequence_SUITE),
   run_suite(fn_substring_SUITE),
   run_suite(fn_substring_after_SUITE),
   run_suite(fn_substring_before_SUITE),
   run_suite(fn_sum_SUITE),
   run_suite(fn_tail_SUITE),
   run_suite(fn_timezone_from_date_SUITE),
   run_suite(fn_timezone_from_dateTime_SUITE),
   run_suite(fn_timezone_from_time_SUITE),
   run_suite(fn_tokenize_SUITE),
   run_suite(fn_trace_SUITE),
   run_suite(fn_translate_SUITE),
   run_suite(fn_true_SUITE),
   run_suite(fn_unordered_SUITE),
   run_suite(fn_unparsed_text_SUITE),
   run_suite(fn_unparsed_text_available_SUITE),
   run_suite(fn_unparsed_text_lines_SUITE),
   run_suite(fn_upper_case_SUITE),
   run_suite(fn_uri_collection_SUITE),
   run_suite(fn_year_from_date_SUITE),
   run_suite(fn_years_from_duration_SUITE),
   run_suite(fn_year_from_dateTime_SUITE),
   run_suite(fn_zero_or_one_SUITE);
run(op) ->
   run_suite(op_add_dayTimeDurations_SUITE),
   run_suite(op_add_dayTimeDuration_to_date_SUITE),
   run_suite(op_add_dayTimeDuration_to_dateTime_SUITE),
   run_suite(op_add_dayTimeDuration_to_time_SUITE),
   run_suite(op_add_yearMonthDurations_SUITE),
   run_suite(op_add_yearMonthDuration_to_date_SUITE),
   run_suite(op_add_yearMonthDuration_to_dateTime_SUITE),
   run_suite(op_anyURI_equal_SUITE),
   run_suite(op_anyURI_greater_than_SUITE),
   run_suite(op_anyURI_less_than_SUITE),
   run_suite(op_bang_SUITE),
   run_suite(op_base64Binary_equal_SUITE),
   run_suite(op_boolean_equal_SUITE),
   run_suite(op_boolean_greater_than_SUITE),
   run_suite(op_boolean_less_than_SUITE),
   run_suite(op_concat_SUITE),
   run_suite(op_concatenate_SUITE),
   run_suite(op_date_equal_SUITE),
   run_suite(op_date_greater_than_SUITE),
   run_suite(op_date_less_than_SUITE),
   run_suite(op_dateTime_equal_SUITE),
   run_suite(op_dateTime_greater_than_SUITE),
   run_suite(op_dateTime_less_than_SUITE),
   run_suite(op_dayTimeDuration_greater_than_SUITE),
   run_suite(op_dayTimeDuration_less_than_SUITE),
   run_suite(op_divide_dayTimeDuration_SUITE),
   run_suite(op_divide_dayTimeDuration_by_dayTimeDuration_SUITE),
   run_suite(op_divide_yearMonthDuration_SUITE),
   run_suite(op_divide_yearMonthDuration_by_yearMonthDuration_SUITE),
   run_suite(op_duration_equal_SUITE),
   run_suite(op_except_SUITE),
   run_suite(op_gDay_equal_SUITE),
   run_suite(op_gMonth_equal_SUITE),
   run_suite(op_gMonthDay_equal_SUITE),
   run_suite(op_gYear_equal_SUITE),
   run_suite(op_gYearMonth_equal_SUITE),
   run_suite(op_hexBinary_equal_SUITE),
   run_suite(op_intersect_SUITE),
   run_suite(op_is_same_node_SUITE),
   run_suite(op_multiply_dayTimeDuration_SUITE),
   run_suite(op_multiply_yearMonthDuration_SUITE),
   run_suite(op_node_after_SUITE),
   run_suite(op_node_before_SUITE),
   run_suite(op_NOTATION_equal_SUITE),
   run_suite(op_numeric_add_SUITE),
   run_suite(op_numeric_equal_SUITE),
   run_suite(op_numeric_divide_SUITE),
   run_suite(op_numeric_greater_than_SUITE),
   run_suite(op_numeric_integer_divide_SUITE),
   run_suite(op_numeric_less_than_SUITE),
   run_suite(op_numeric_mod_SUITE),
   run_suite(op_numeric_multiply_SUITE),
   run_suite(op_numeric_subtract_SUITE),
   run_suite(op_numeric_unary_minus_SUITE),
   run_suite(op_numeric_unary_plus_SUITE),
   run_suite(op_QName_equal_SUITE),
   run_suite(op_string_equal_SUITE),
   run_suite(op_string_greater_than_SUITE),
   run_suite(op_string_less_than_SUITE),
   run_suite(op_subtract_dates_SUITE),
   run_suite(op_subtract_dateTimes_SUITE),
   run_suite(op_subtract_dayTimeDuration_from_date_SUITE),
   run_suite(op_subtract_dayTimeDuration_from_dateTime_SUITE),
   run_suite(op_subtract_dayTimeDuration_from_time_SUITE),
   run_suite(op_subtract_dayTimeDurations_SUITE),
   run_suite(op_subtract_times_SUITE),
   run_suite(op_subtract_yearMonthDuration_from_date_SUITE),
   run_suite(op_subtract_yearMonthDuration_from_dateTime_SUITE),
   run_suite(op_subtract_yearMonthDurations_SUITE),
   run_suite(op_time_equal_SUITE),
   run_suite(op_time_greater_than_SUITE),
   run_suite(op_time_less_than_SUITE),
   run_suite(op_to_SUITE),
   run_suite(op_union_SUITE),
   run_suite(op_yearMonthDuration_greater_than_SUITE),
   run_suite(op_yearMonthDuration_less_than_SUITE);


run(Str) ->
   io:format("~p~n",[Str]),
   xqerl:run(Str).

run(Str, Options) ->
   io:format("~p~n",[Str]),
   xqerl:run(Str, Options).


%% test() ->
%%    L = [{sources, [{"file:///C:/git/xqerl/test/QT3_1_0/docs/atomic.xml","."}]},
%% {schemas, [{"file:///C:/git/xqerl/test/QT3_1_0/docs/atomic.xsd","http://www.w3.org/XQueryTest"}]},
%% {collections, []},
%% {'static-base-uri', []},
%% {params, []},
%% {namespaces, [{"http://www.w3.org/XQueryTest","atomic"}]},
%% {resources, []}
%% ],
%%    handle_environment(L).


handle_environment(List) ->
   Sources = proplists:get_value(sources, List) ,
   Schemas = proplists:get_value(schemas, List) ,
   Collections = proplists:get_value(collections, List) ,
   BaseUri = proplists:get_value('static-base-uri', List) ,
   Params = proplists:get_value(params, List) ,
   Namespaces = proplists:get_value(namespaces, List) ,
   Resources = proplists:get_value(resources, List) ,
   Modules = proplists:get_value(modules, List) ,
   
   Sources1 = lists:map(fun({File,Role,Uri}) ->
                              if Uri == [] ->
                                 case catch xqerl_context:get_available_document(File) of
                                          {'EXIT',_} ->
                                             Doc = xqerl_doc:read_http(File, File),
                                             ?seq:singleton(xqerl_doc:doc_to_node(Doc));
                                          _ ->
                                             ?seq:singleton(#xqNode{frag_id = File, identity = 1})
                                       end;
                                 true ->
                                 case catch xqerl_context:get_available_document(Uri) of
                                          {'EXIT',_} ->
                                             Doc = xqerl_doc:read_http(File, Uri),
                                             ?seq:singleton(xqerl_doc:doc_to_node(Doc));
                                          _ ->
                                             ?seq:singleton(#xqNode{frag_id = Uri, identity = 1})
                                       end
                              end,
                                    
                              if Role == "." ->
                         if Uri == [] ->
                               "declare context item := doc('"++File++"');\n";
                            true ->
                               "declare context item := doc('"++Uri++"');\n"
                         end;
                      true ->
                         if Role == [] -> "";
                            true ->
                               "declare variable "++Role++" := doc('"++File++"');\n"
                         end
                   end
             end, Sources),
   Schemas1 = lists:map(fun({File,Uri}) ->
                              "import schema default element namespace '"++Uri++"' at '"++File++"';\n"
             end, Schemas),
   _ = lists:foreach(fun({File,_Uri}) ->
                           xqerl:compile(File)
             end, Modules),
   _ = lists:foreach(fun({Uri,Docs}) ->
                           lists:foreach(fun(File) ->
                                               xqerl_doc:read_http(File)
                                         end, Docs),
                           xqerl_context:add_available_collection(Uri,Docs)
                     end, Collections),
   _ = xqerl_context:set_static_base_uri(BaseUri),
   Params1 = lists:map(fun({Name,As,Value}) ->
                             "declare variable $"++Name++" as "++As++" := "++Value++";\n"
                       end, Params),
   Namespaces1 = lists:map(fun({Uri,[]}) ->
                              "declare default element namespace '"++Uri++"';\n";
                              ({Uri,Prefix}) ->
                                 "declare namespace "++Prefix++" = '"++Uri++"';\n"
                           end, Namespaces),
   Sources1++Schemas1++Params1++Namespaces1.



